# -*- coding: utf-8 -*-

import matplotlib.pyplot as plt
import gillespie


def draw_curve(molecules, points, times, constants):
    """
    Draw the simulation generated by the algorithm.
    :param molecules: The molecules initialize quantities
    :param points: The curves for each molecules types
    :param times: The corresponding times values
    :param constants: The constants used in rates equations
    """

    # Handle quit event
    def on_quit(event):
        if event.key == 'q':
            plt.close(event.canvas.figure)
    plt.gcf().canvas.mpl_connect('key_press_event', on_quit)

    # Draw curves
    for name in molecules:
        plt.plot(times, points[name], label="%s=%d" % (name, molecules[name]))

    # Add legend
    plt.ylabel('System 2')
    plt.legend()
    plt.figtext(0.13, 0.03, ', '.join(["%s=%s" % (name, value) for name, value in constants.items()]))
    plt.show()


def test_system_1():
    return gillespie.algorithm(
        molecules={'A': 199., 'B': 1.},
        system=[
            {
                'propensity': 'A * B * k',
                'reaction': {'A': -1}
            }
        ],
        constants={'k': 1.},
    )


def test_system_2():
    return gillespie.algorithm(
        molecules={'A': 100., 'B': 100.},
        system=[
            {
                'propensity': 'kB * (((A ** h) * KB) / ((KA + (A ** h)) * (KB + (B ** l))))',
                'reaction': {'B': 1},
            },
            {
                'propensity': 'B * dB',
                'reaction': {'B': -1},
            },
            {
                'propensity': 'kA * (((B ** l) * KA) / ((KA + (A ** h)) * (KB + (B ** l))))',
                'reaction': {'A': 1},
            },
            {
                'propensity': 'A * dA',
                'reaction': {'A': -1},
            },
        ],
        constants={
            'dA': 1.0, 'kA': 100.0, 'KA': 1.0,
            'dB': 1.0, 'kB': 1.0, 'KB': 1.0,
            'l': 1.0, 'h': 1.0,
        },
        normalized=True,
    )


def test_system_3():
    return gillespie.algorithm(
        molecules={'A': 5.0, 'B': 10.0, 'C': 0.0},
        system=[
            {
                'propensity': 'A * B * kAB',
                'reaction': {'A': -1, 'B': -1, 'C': 1},
            },
        ],
        constants={'kAB': 0.1},
        normalized=False,
    )


if __name__ == "__main__":

    # draw_curve(**test_system_1())
    # draw_curve(**test_system_2())
    draw_curve(**test_system_3())
